{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "oven_0", "type": "oven"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "stove_0", "type": "stove"}, {"name": "r_0", "type": "r"}]}, {"name": "base", "arguments": [{"name": "f_0", "type": "f"}, {"name": "ingredient_0", "type": "ingredient"}]}, {"name": "chopped", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "chopped", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "cookable", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "cooked", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cooking_location", "arguments": [{"name": "r_0", "type": "r"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "cuttable", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "free", "arguments": [{"name": "slot_3", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_4", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_5", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_6", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_7", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_8", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_9", "type": "slot"}]}, {"name": "fried", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "fried", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_2", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "ingredient_0", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "ingredient_1", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_1", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "out", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "raw", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "used", "arguments": [{"name": "slot_0", "type": "slot"}]}, {"name": "used", "arguments": [{"name": "slot_1", "type": "slot"}]}, {"name": "used", "arguments": [{"name": "slot_2", "type": "slot"}]}], "grammar": {"theme": "house", "names_to_exclude": ["", "counter", "red apple", "cookbook", "stove", "yellow bell pepper", null, "kitchen", "meal", "fridge", "oven", "yellow apple", "table"], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "meal_0", "type": "meal"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "event", "arguments": [{"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "meal_0", "type": "meal"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "event", "arguments": [{"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "kitchen", "noun": null, "adj": null, "desc": "You are in a kitchen. An usual kind of place.\n\n You see [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] fridge in the corner.[if c_0 is open and there is something in the c_0] The fridge contains [a list of things in the c_0]. Wow, isn't TextWorld just the best?[end if][if c_0 is open and the c_0 contains nothing] The fridge is empty, what a horrible day![end if] You make out [if oven_0 is locked]a locked[else if oven_0 is open]an opened[otherwise]a closed[end if] oven, which looks conventional, in the corner.[if oven_0 is open and there is something in the oven_0] The oven contains [a list of things in the oven_0]. Wow, isn't TextWorld just the best?[end if][if oven_0 is open and the oven_0 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You make out a table. [if there is something on the s_0]You see [a list of things on the s_0] on the table.[end if][if there is nothing on the s_0]But oh no! there's nothing on this piece of junk.[end if] You see a gleam over in a corner, where you can see a counter. Now why would someone leave that there? [if there is something on the s_1]You see [a list of things on the s_1] on the counter.[end if][if there is nothing on the s_1]The counter appears to be empty.[end if] You see a stove. The stove is conventional.[if there is something on the stove_0] On the stove you can make out [a list of things on the stove_0].[end if][if there is nothing on the stove_0] But there isn't a thing on it. Oh! Why couldn't there just be stuff on it?[end if]\n\n", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "fridge", "noun": "fridge", "adj": "conventional", "desc": "The fridge looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["oven_0", {"id": "oven_0", "type": "oven", "name": "oven", "noun": "oven", "adj": "conventional", "desc": "Useful for roasting things.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "table", "noun": "table", "adj": "massive", "desc": "The table is wobbly.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "counter", "noun": "counter", "adj": "vast", "desc": "The counter is undependable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["stove_0", {"id": "stove_0", "type": "stove", "name": "stove", "noun": "stove", "adj": "conventional", "desc": "Useful for frying things.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "yellow apple", "noun": "yellow apple", "adj": "", "desc": "that's a yellow apple!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_0", {"id": "ingredient_0", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "yellow bell pepper", "noun": "yellow bell pepper", "adj": "", "desc": "that's a yellow bell pepper!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "red apple", "noun": "red apple", "adj": "", "desc": "You couldn't pay me to eat that thing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["meal_0", {"id": "meal_0", "type": "meal", "name": "meal", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_3", {"id": "slot_3", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_4", {"id": "slot_4", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_5", {"id": "slot_5", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_6", {"id": "slot_6", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_7", {"id": "slot_7", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_8", {"id": "slot_8", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_9", {"id": "slot_9", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["RECIPE", {"id": "RECIPE", "type": "RECIPE", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "cookbook", "noun": "cookbook", "adj": "interesting", "desc": "You open the copy of 'Cooking: A Modern Approach (3rd Ed.)' and start reading:\n\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\nyellow apple\n\nDirections:\nchop the yellow apple\n  fry the yellow apple\n  prepare meal\n", "room_type": "work", "definite": null, "indefinite": null, "synonyms": ["recipe"]}], ["slot_0", {"id": "slot_0", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_1", {"id": "slot_1", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_2", {"id": "slot_2", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        #south_of(r, r') = north_of(r', r);\n        #east_of(r, r') = west_of(r', r);\n\n        #south_of/d(r, d, r') = north_of/d(r', d, r);\n        #east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n\n        look :: at(P, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# Inventory\ntype slot {\n    predicates {\n        free(slot);\n        used(slot);\n    }\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"\";\n        }\n        predicates {\n            free(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n            used(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n        }\n    }\n}\n\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        take :: $at(P, r) & at(o, r) & free(slot) -> in(o, I) & used(slot);\n        drop :: $at(P, r) & in(o, I) & used(slot) -> at(o, r) & free(slot);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) & free(slot) -> in(o, I) & used(slot);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) & used(slot) -> in(o, c) & free(slot);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) & free(slot) -> in(o, I) & used(slot);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) & used(slot) -> on(o, s) & free(slot);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n## box: i.e. portable container\n#type box : c, o {\n#\n#    predicates {\n#\n#        reachable_box_I(P, I, box) = in(box, I);\n#        reachable_box_r(P, r, box) = at(P, r) & at(box, r);\n#        reachable_box_s(P, r, s, box) = at(P, r) & at(s, r) & on(box, s);\n#        reachable_box_c(P, r, c, box) = at(P, r) & at(c, r) & open(c) & in(box, c);\n#    }\n#\n#    rules {\n#        insert/box :: $reachable_box_I(P, I, box) & $open(box) & in(o, I) -> in(o, box);\n#        insert/box/s :: $reachable_box_s(P, r, s, box) & in(o, I) -> in(o, box);\n#        insert/box/c :: $reachable_box_c(P, r, c, box) & in(o, I) -> in(o, box);\n#    }\n#\n#    inform7 {\n#        type {\n#            kind :: \"box-like\";\n#            definition :: \"box-like is a kind of container. box-like is portable.\";\n#        }\n#\n#        commands {\n#            insert/box :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/s :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/c :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#        }\n#    }\n#}\n\n# oven\ntype oven : c {\n    rules {\n        cook/oven/burned :: $at(P, r) & $at(oven, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/oven/cooked/raw :: $at(P, r) & $at(oven, r) & $in(f, I) & raw(f)            -> roasted(f) & cooked(f);\n        cook/oven/cooked/needs_cooking :: $at(P, r) & $at(oven, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> roasted(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"oven-like\";\n            definition :: \"oven-like is a source of heat.\";\n        }\n\n        commands {\n            cook/oven/cooked/raw           :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/cooked/needs_cooking :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/burned               :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n        }\n    }\n}\n\ntype toaster : c {\n    rules {\n        cook/toaster/burned :: $at(P, r) & $at(toaster, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/toaster/cooked/raw :: $at(P, r) & $at(toaster, r) & $in(f, I) & raw(f)            -> grilled(f) & cooked(f);\n        cook/toaster/cooked/needs_cooking :: $at(P, r) & $at(toaster, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> grilled(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"toaster-like\";\n            definition :: \"toaster-like is a source of heat.\";\n        }\n\n        commands {\n            cook/toaster/cooked/raw           :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/cooked/needs_cooking :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/burned               :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    inform7 {\n        code :: \"\"\"\n            The carrying capacity of the player is 0.\n        \"\"\";\n    }\n\n}\n\n## pot\n#type pot : box {\n#\n#    inform7 {\n#        type {\n#            kind :: \"pot-like\";\n#            definition :: \"pot-like is a kind of box-like.\";\n#        }\n#\n#    }\n#}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        consumed(f);\n        edible(f);\n        inedible(f);\n\n        needs_cooking(f);\n        raw(f);\n        cooked(f);\n        burned(f);\n\n        roasted(f);\n        fried(f);\n        grilled(f);\n        # boiled(f);\n        # steamed(f);\n\n        uncut(f);\n        chopped(f);\n        sliced(f);\n        diced(f);\n    }\n\n    rules {\n        eat :: in(f, I) & edible(f) & used(slot) -> consumed(f) & free(slot);\n        drink :: in(f, I) & drinkable(f) & used(slot) -> consumed(f) & free(slot);\n        slice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> sliced(f);\n        dice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> diced(f);\n        chop :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> chopped(f);\n    }\n\n    constraints {\n        consumed1 :: consumed(f) & in(f, I) -> fail();\n        consumed2 :: consumed(f) & in(f, c) -> fail();\n        consumed3 :: consumed(f) & on(f, s) -> fail();\n        consumed4 :: consumed(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is usually edible. food is cookable. food has a type of cooking. food has a type of cutting. food can be cooked. food can be burned. food can be consumed. food is usually not consumed. food is usually cuttable.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            inedible(f) :: \"The {f} is inedible\";\n            consumed(f) :: \"The {f} is consumed\";\n\n            needs_cooking(f) :: \"The {f} is needs cooking\";\n\n            raw(f) :: \"The {f} is raw\";\n            cooked(f) :: \"The {f} is cooked\";\n            burned(f) :: \"The {f} is burned\";\n            fried(f) :: \"The {f} is fried\";\n            grilled(f) :: \"The {f} is grilled\";\n            roasted(f) :: \"The {f} is roasted\";\n\n            uncut(f) :: \"The {f} is uncut\";\n            sliced(f) :: \"The {f} is sliced\";\n            chopped(f) :: \"The {f} is chopped\";\n            diced(f) :: \"The {f} is diced\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n            drink :: \"drink {f}\" :: \"drinking the {f}\";\n            slice :: \"slice {f} with {o}\" :: \"slicing the {f} with the {o}\";\n            dice  :: \"dice {f} with {o}\"  :: \"dicing the {f} with the {o}\";\n            chop  :: \"chop {f} with {o}\"  :: \"chopping the {f} with the {o}\";\n        }\n\n        code :: \"\"\"\n            [Drinking liquid]\n            Drinking carried thing is an action applying to one carried thing.\n            The block drinking rule is not listed in any rulebook.\n            Understand nothing as drinking.\n            Understand \"drink [something]\" as drinking carried thing.\n\n            After drinking carried thing:\n                Now the noun is consumed;\n                Continue the action.\n\n            Check an actor drinking carried thing (this is the can\u2019t drink unless drinkable rule):\n                if the noun is not a thing or the noun is not drinkable:\n                    say \"You cannot drink [the noun].\";\n                    rule fails;\n\n            Carry out an actor drinking carried thing (this is the drinking rule):\n                remove the noun from play.\n\n            Report an actor drinking carried thing (this is the report drinking rule):\n                if the actor is the player:\n                    say \"You drink [the noun]. Not bad.\";\n                otherwise:\n                    say \"[The person asked] just drunk [the noun].\".\n\n            [Eating food]\n            After eating a food (called target):\n                Now the target is consumed;\n                Continue the action.\n\n            Check eating inedible food (called target):\n                if target is needs cooking:\n                    say \"You should cook [the target] first.\";\n                    rule fails.\n\n            [Understanding things by their properties - http://inform7.com/learn/man/WI_17_15.html]\n            Understand the type of cutting property as describing food.\n            Understand the type of cooking property as describing food.\n\n            [Processing food]\n            Understand the commands  \"slice\", \"prune\" as something new.\n            The block cutting rule is not listed in any rulebook.\n            Dicing it with is an action applying to two carried things.\n            Slicing it with is an action applying to two carried things.\n            Chopping it with is an action applying to two carried things.\n\n            Slicing something with something is a cutting activity.\n            Dicing something with something is a cutting activity.\n            Chopping something with something is a cutting activity.\n\n            Does the player mean slicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean chopping something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean dicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Check an actor cutting (this is the generic cut is now allowed rule):\n                say \"You need to specify how you want to cut [the noun]. Either slice, dice, or chop it.\";\n                rule fails.\n\n            Before a cutting activity when the noun is not cuttable:\n                say \"Can only cut cuttable food.\";\n                rule fails.\n\n            Before a cutting activity when the noun is cuttable and the noun is not uncut:\n                say \"[The noun] is already [type of cutting of the noun].\";\n                rule fails.\n\n            Before a cutting activity when the second noun is not sharp:\n                say \"Cutting something requires a knife.\";\n                rule fails.\n\n            Before printing the name of a food (called the food item) which is not uncut while looking, examining, listing contents or taking inventory:\n                say \"[type of cutting of food item] \".\n\n            [Slicing food]\n            Carry out slicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"[The food item] is already [type of cutting of the food item].\";\n                    stop;\n                Now the food item is sliced;\n                say \"You slice the [food item].\".\n\n            Understand \"slice [something] with/using [something]\" as slicing it with.\n\n            [Dicing food]\n            Carry out dicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is diced;\n                say \"You dice the [food item].\".\n\n            Understand \"dice [something] with/using [something]\" as dicing it with.\n\n            [Chopping food]\n            Carry out chopping a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is chopped;\n                say \"You chop the [food item].\".\n\n            Understand the command \"chop\" as something new. [Remove its association with slicing]\n            Understand \"chop [something] with/using [something]\" as chopping it with.\n\n            [Cooking food]\n            Cooking it with is an action applying to one carried thing and one thing.\n\n            Does the player mean cooking something with something carried:\n                it is very unlikely;\n\n            Check cooking something not cookable with something (this is the cook only cookable things rule):\n                say \"Can only cook food.\" instead.\n\n            Check cooking something cookable with something not a source of heat (this is the cooking requires a source of heat rule):\n                say \"Cooking requires a source of heat.\" instead.\n\n            Carry out cooking a carried food (called the food item) with a thing (called a the source of heat):\n                if the food item is cooked:\n                    Now the food item is burned;\n                    Now the food item is not edible;\n                    say \"You burned the [food item]!\";\n                    stop;\n                otherwise:\n                    Now the food item is cooked;\n                if the food item is needs cooking:\n                    Now the food item is edible;\n                    Now the food item is not needs cooking;\n                if the source of heat is a stove-like:\n                    Now the food item is fried;\n                    say \"You fried the [food item].\";\n                else if the source of heat is a oven-like:\n                    Now the food item is roasted;\n                    say \"You roasted the [food item].\";\n                else if the source of heat is a toaster-like:\n                    Now the food item is grilled;\n                    say \"You grilled the [food item].\".\n\n            Understand \"cook [something] with/in/on/using [something]\" as cooking it with.\n\n            Before printing the name of a food (called the food item) while looking, examining, listing contents or taking inventory:\n                if the food item is needs cooking:\n                    say \"raw \";\n                else if the food item is burned:\n                    say \"burned \";\n                else if the food item is not raw:\n                    say \"[type of cooking of food item] \".\n\n        \"\"\";\n    }\n}\n\ntype ingredient : t {\n    predicates {\n        base(f, ingredient);\n\n        raw(ingredient);\n        roasted(ingredient);\n        fried(ingredient);\n        # cooked(ingredient);\n\n        uncut(ingredient);\n        chopped(ingredient);\n        sliced(ingredient);\n        diced(ingredient);\n    }\n\n    inform7 {\n        predicates {\n            #base(f, ingredient) :: \"When play begins, the base of {ingredient} is {f}\";\n            base(f, ingredient) :: \"The base of {ingredient} is {f}\";\n\n            raw(ingredient) :: \"The {ingredient} is raw\";\n            # cooked(ingredient) :: \"The base of {ingredient} is cooked\";\n            fried(ingredient) :: \"The {ingredient} is fried\";\n            grilled(ingredient) :: \"The {ingredient} is grilled\";\n            roasted(ingredient) :: \"The {ingredient} is roasted\";\n\n            uncut(ingredient) :: \"The {ingredient} is uncut\";\n            sliced(ingredient) :: \"The {ingredient} is sliced\";\n            chopped(ingredient) :: \"The {ingredient} is chopped\";\n            diced(ingredient) :: \"The {ingredient} is diced\";\n        }\n\n        type {\n            kind :: \"ingredient-like\";\n            definition :: \"ingredient-like has a thing called base. ingredient-like has a type of cooking. ingredient-like has a type of cutting.\";\n        }\n    }\n}\n\n# meal\ntype meal : f {\n    inform7 {\n        type {\n            kind :: \"meal-like\";\n        }\n    }\n}\n\ntype RECIPE {\n    predicates {\n        ingredient_1(f);\n        ingredient_2(f);\n        ingredient_3(f);\n        ingredient_4(f);\n        ingredient_5(f);\n        used(f);\n        cooking_location(r, RECIPE);\n        in(ingredient, RECIPE);\n        out(meal, RECIPE);\n        player_in_cooking_location(P, r) = at(P, r) & cooking_location(r, RECIPE);\n    }\n\n    rules {\n        make/recipe/1 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & raw(meal);\n        make/recipe/2 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & $out(meal, RECIPE) & $used(slot) & used(slot') -> in(meal, I) & free(slot') & edible(meal) & used(f) & used(f') & raw(meal);\n        make/recipe/3 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & edible(meal) & used(f) & used(f') & used(f'') & raw(meal);\n        make/recipe/4 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & free(slot''') & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & raw(meal);\n        make/recipe/5 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & in(f'''', I) & $ingredient_5(f'''') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') & used(slot''') & used(slot'''') -> in(meal, I) & free(slot') & free(slot'') & free(slot''') & free(slot'''') & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & used(f'''') & raw(meal);\n    }\n\n    inform7 {\n        predicates {\n            ingredient_1(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_2(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_3(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_4(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_5(f) :: \"\";  # No equivalent in Inform7.\n            cooking_location(r, RECIPE) :: \"The cooking location of the {RECIPE} is the {r}.\";\n            in(ingredient, RECIPE) :: \"When play begins, add {ingredient} to the ingredients of the {RECIPE}\";\n            out(meal, RECIPE) :: \"The meal of the {RECIPE} is the {meal}.\";\n        }\n\n        type {\n            kind :: \"recipe-like\";\n            definition :: \"A recipe-like is a kind of thing. A recipe-like has a list of ingredient-like called ingredients. A recipe-like has a thing called meal. A recipe-like has a room called cooking location.\";\n        }\n\n        commands {\n            make/recipe/1 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/2 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/3 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/4 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/5 :: \"prepare meal\" :: \"preparing meal\";\n        }\n\n        code :: \"\"\"\n            [Ingredient]\n            Rule for printing the name of an ingredient-like (called I):\n                if type of cutting of I is not uncut:\n                    say  \"[type of cutting of I] \";\n                if type of cooking of I is not raw:\n                    say  \"[type of cooking of I] \";\n                say  \"[base of I]\";\n\n            [Preparing a meal]\n            Preparing meal is an action applying to nothing.\n            Before preparing meal:\n                if location is not the cooking location of the recipe:\n                    say \"Can only prepare meal in the [cooking location of the recipe].\";\n                    rule fails;\n                Repeat with ingredient running through the ingredients of the recipe:\n                    let F be the base of the ingredient;\n                    if player does not carry the F:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"You still miss something.\";\n                        rule fails;\n                    if type of cooking of F is not type of cooking of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cooked.\";\n                        rule fails;\n                    if type of cutting of F is not type of cutting of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cut.\";\n                        rule fails;\n\n            Carry out preparing meal:\n                say \"Adding the meal to your inventory.\";\n                Repeat with ingredient running through the ingredients of recipe:\n                    now the base of the ingredient is nowhere;\n                now the player carries the meal of the recipe;\n                set pronouns from the meal of the recipe.\n\n            Understand \"prepare meal\" as preparing meal.\n        \"\"\";\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n# stove\ntype stove : s {\n    rules {\n        cook/stove/burned :: $at(P, r) & $at(stove, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/stove/cooked/raw :: $at(P, r) & $at(stove, r) & $in(f, I) & raw(f)            -> fried(f) & cooked(f);\n        cook/stove/cooked/needs_cooking :: $at(P, r) & $at(stove, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> fried(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"stove-like\";\n            definition :: \"stove-like is a source of heat.\";\n        }\n\n        commands {\n            cook/stove/cooked/raw           :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/cooked/needs_cooking :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/burned               :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n        }\n    }\n}\n\n", "text_grammars_path": "/usr/local/Caskroom/miniconda/base/envs/loa/lib/python3.8/site-packages/textworld/challenges/tw_cooking/textworld_data/text_grammars"}, "metadata": {"seeds": {"map": 21328, "objects": 43386, "quest": 28383, "grammar": 11522}, "goal": "You open the copy of 'Cooking: A Modern Approach (3rd Ed.)' and start reading:\n\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\nyellow apple\n\nDirections:\nchop the yellow apple\n  fry the yellow apple\n  prepare meal\n", "recipe": "\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\nyellow apple\n\nDirections:\nchop the yellow apple\n  fry the yellow apple\n  prepare meal\n", "ingredients": [["yellow apple", "fried", "chopped"]], "settings": {"third_party": null, "subcommand": "tw-cooking", "recipe": 1, "take": 0, "go": 1, "open": false, "cook": false, "cut": false, "drop": false, "recipe_seed": 0, "split": null, "output": "./tw_games/", "seed": 52744, "format": "z8", "overview": false, "save_overview": false, "force": false, "silent": false, "verbose": false}, "entities": ["meal", "kitchen", "table", "stove", "oven", "counter", "fridge", "cookbook", "yellow apple", "yellow bell pepper", "red apple"], "nb_distractors": 0, "walkthrough": ["inventory", "examine cookbook", "drop yellow bell pepper", "drop red apple", "prepare meal", "eat meal"], "max_score": 2, "uuid": "tw-cooking-recipe1+go1-Z9nJCKd8hdJvCMOP"}, "objective": "You are hungry! Let's cook a delicious meal. Check the cookbook in the kitchen for the recipe. Once done, enjoy your meal!"}